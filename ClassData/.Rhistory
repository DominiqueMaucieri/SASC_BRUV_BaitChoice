theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')
WLregress
WLregress <- ggplot(data= scalewithsize, aes(x = size, y = WL)) +geom_point(aes(color=Guild) +labs(x="Centroid Size (cm)", y="Wing Loading (g/cm2)", title="", size=2) +
WLregress <- ggplot(data= scalewithsize, aes(x = size, y = WL)) +geom_point(aes(color=Guild)) +labs(x="Centroid Size (cm)", y="Wing Loading (g/cm2)", title="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')
WLregress
WLregress <- ggplot(data= scalewithsize, aes(x = size, y = WL)) +geom_point(aes(color=Guild)) +labs(x="Centroid Size (cm)", y="Wing Loading (g/cm2)", title="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')
WLregress
WLregress <- ggplot(data= scalewithsize, aes(x = size, y = WL)) +geom_point(aes(shape=Guild)) +labs(x="Centroid Size (cm)", y="Wing Loading (g/cm2)", title="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')
WLregress
WLregress <- ggplot(data= scalewithsize, aes(x = size, y = WL)) +geom_point(aes(shape=Guild)) +labs(x="Centroid Size (cm)", y="Wing Loading (g/cm2)", title="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')
WLregress
WLregress <- ggplot(data= scalewithsize, aes(x = size, y = WL)) +geom_point(aes(shape=Guild)) +labs(x="Centroid Size (cm)", y="Wing Loading (g/cm2)", title="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')+ scale_shape_manual(values=c( 0,1,2,5, 15,16,17,18))
WLregress
ARregress <- ggplot(data= scalewithsize, aes(x = size, y = AR)) +geom_point(aes(shape=Guild)) +labs(x="Centroid Size (cm)", y="Aspect Ratio", title="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +stat_smooth(method='lm')+ scale_shape_manual(values=c( 0,1,2,5, 15,16,17,18))
ARregress
install.packages("rmarkdown")
library(rmarkdown)
install.packages("installr")
library(installr)
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Felix')
install.packages(updateR)
install.packages('updateR')
library(updateR)
library(rmarkdown)
install.packages('rmarkdown')
library(rmarkdown)
data(cars)
str(cars)
summary(cars)
plot(cars)
data(cars)
str(cars)
summary(cars)
plot(cars)
ls
rm(list=ls())
ls
setwd("~/Dropbox/Documents/Research/SASC/BRUV Paper")
###### Packages and Data ######
#now you have to run all the packages so they will be active during this R session
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggpubr)
library(vegan)
library(devtools)
library(plotrix)
library(reshape)
library(unmarked)
library(AICcmodavg)
library(stats)
library(MASS)
library(data.table)
library(lme4)
library(emmeans)
library(tidyr)
#This will load the data that will be used for the entire data analysis
#Yes Aaron i am only using one data sheet
bruvdata <- read_excel("BRUV_master.xlsx", sheet = "Compiled Data", col_types = c("text", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "text", "text",  "text", "text", "text", "numeric","text", "numeric", "text", "text","numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "text", "numeric", "text", "numeric", "numeric", "text"))
library(car)
install.packages("car")
library(car)
library(car)
###### SHANNON ######
#First i ran a shannon index on each site to take into account abundance and diversity
ShannonData <- bruvdata
ShannonData[c( 3, 4, 5, 6, 7, 9, 11, 12, 13,14, 16, 17 ,18, 19, 20,21,22,23,24,25,26,27,28,29,30 )] <- list(NULL)
ShannonData$group=paste(ShannonData$Site, ShannonData$Date)
ShanLength <- length(ShannonData$Site)
as.factor(ShannonData$group)
ShannonData$Shan <- 0
for(i in 1:ShanLength){
xx <- subset(ShannonData, group==ShannonData$group[i])
cc <- diversity(xx$MaxN, index = "shannon", MARGIN = 1, base = exp(1))
ShannonData$Shan [i] <- cc
}
ShanVector <- factor(ShannonData$group)
aa<-levels(ShanVector)
bb <- length(aa)
ShanSumm <- data.frame(matrix(NA, nrow = bb, ncol = 3))
colnames(ShanSumm) <- c("GroupID", "ShanIndex", "Bait")
ShanSumm$GroupID <- aa
as.numeric(ShannonData$Shan)
as.factor(ShannonData$Bait)
for(i in 1:bb){
xx<-subset(ShannonData, group==ShanSumm$GroupID[i])
ShanSumm$ShanIndex[i] <- xx[1,7]
ShanSumm$Bait[i] <- xx[1,3]
}
as.data.frame(ShanSumm)
ShanSumm$ShanIndex <- unlist(ShanSumm$ShanIndex)
ShanSumm$Bait <-unlist(ShanSumm$Bait)
qqnorm(ShanSumm$ShanIndex)
qqline(ShanSumm$ShanIndex)
#if the data is not normal: doesnt represent a fairly straight line, contact me, we will need
#to switch up the test
shanttest<-t.test(ShanSumm$ShanIndex~ShanSumm$Bait)
shanttest
#t = 0.93914, df = 11.807, p-value = 0.3665
#mean in group Sardines mean in group Squid_pike
#1.432893                 1.089881
#This test was not significant for my data, how is if for yours?
#it is significant if the p-value is <0.05
Sar<-subset(ShanSumm, Bait=="Sardines")
SqP<-subset(ShanSumm, Bait=="Squid_pike")
SarSEM<- sd(Sar$ShanIndex)/sqrt(length(Sar$ShanIndex))
SqPSEM<- sd(SqP$ShanIndex)/sqrt(length(SqP$ShanIndex))
ShanPlotDF <- data.frame(matrix(NA, nrow = 2, ncol = 4))
colnames(ShanPlotDF) <- c("Mean", "SEM", "poslim", "neglim")
rownames(ShanPlotDF) <- c("Sardines", "Squid and Pike")
ShanPlotDF$Mean <- shanttest$estimate
ShanPlotDF$SEM <- c(SarSEM, SqPSEM)
ShanPlotDF$poslim <- (ShanPlotDF$Mean + ShanPlotDF$SEM)
ShanPlotDF$neglim <- (ShanPlotDF$Mean - ShanPlotDF$SEM)
ShanPlotDF$Bait <- c("Sardines", "Squid and Pike")
ShanPlot <- ggplot(ShanPlotDF, aes(x = Bait, y = Mean)) +geom_point()+
labs(x="Bait type", y="Mean Shannon Diversity Index", title="", colour="", size=3) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_errorbar(aes(ymax=poslim,ymin=neglim),position=position_dodge(0.9), width=.1, data=ShanPlotDF)
ShanPlot
###### AIC ######
#AIC MODEL SELECTION NOT TO BE USED, ONLY FOR REFERENCE
#We can maybe run later but we need a llloooootttt more data first
#Abundance <- taxdata
#Abundance$group=paste(Abundance$Site, Abundance$Date)
#AOV1 <- aov(Abundance$MaxN_total ~ Abundance$Bait)
#AOV2 <- aov(Abundance$MaxN_total ~ Abundance$Bait*Abundance$Depth)
#AOV3 <- aov(Abundance$MaxN_total ~ Abundance$Bait*Abundance$Water_temp)
#AOV4 <- aov(Abundance$MaxN_total ~ Abundance$Bait*Abundance$Site)
#AOV5 <- aov(Abundance$MaxN_total ~ Abundance$Bait*Abundance$Vis)
#AOV6 <- aov(Abundance$MaxN_total ~ Abundance$Bait*Abundance$Habitat)
#AOV7 <- aov(Abundance$MaxN_total ~ Abundance$Depth*Abundance$Water_temp)
#AOV8 <- aov(Abundance$MaxN_total ~ Abundance$Depth*Abundance$Water_temp*Abundance$Site)
#AOV9 <- aov(Abundance$MaxN_total ~ Abundance$Depth*Abundance$Water_temp*Abundance$Site*Abundance$Bait)
#GLOBAL <- aov(Abundance$MaxN_total ~ Abundance$Depth*Abundance$Water_temp*Abundance$Site*Abundance$Bait*Abundance$Habitat*Abundance$Vis)
#Cand.modsAbundance <- list(AOV1, AOV2, AOV3, AOV4, AOV5, AOV6, AOV7, AOV8, AOV9, GLOBAL)
#ModnamesAbundance <- c("1", "2", "3", "4","5", "6","7", "8","9", "Global")
#AIC_tableAbundance <- aictab(cand.set = Cand.modsAbundance, modnames = ModnamesAbundance, second.ord = TRUE)
#AIC_tableAbundance
###### Total Abundance ######
#then i analyzed the total abundance at each site
Abundance <- bruvdata
Abundance$group=paste(Abundance$Site, Abundance$Date)
Abundance$MaxN_total<- 0
Abundance[c( 3, 4, 5, 6, 7, 12, 13,14, 16, 17 , 19, 20,21,22,23,24,25,26,27,30 )] <- list(NULL)
AbundanceLength <- length(Abundance$Site)
for(i in 1:AbundanceLength){
xx <- subset(Abundance, group==Abundance$group[i])
cc <- sum(xx$MaxN)
Abundance$MaxN_total [i] <- cc
}
AbundVector <- factor(Abundance$group)
dd<-levels(AbundVector)
ee <- length(dd)
AbundSumm <- data.frame(matrix(NA, nrow = bb, ncol = 3))
colnames(AbundSumm) <- c("GroupID", "MaxN", "Bait")
AbundSumm$GroupID <- dd
AbundSumm$Temp <- NA
AbundSumm$Depth <- NA
AbundSumm$Vis <-NA
for(i in 1:ee){
xx<-subset(Abundance, group==AbundSumm$GroupID[i])
AbundSumm$MaxN[i] <- xx[1,12]
AbundSumm$Bait[i] <- xx[1,3]
AbundSumm$Temp[i] <- xx[1,8]
AbundSumm$Depth[i] <- xx[1,9]
AbundSumm$Vis[i] <- xx[1,10]
}
as.data.frame(AbundSumm)
AbundSumm$MaxN <- unlist(AbundSumm$MaxN)
AbundSumm$Bait <-unlist(AbundSumm$Bait)
AbundSumm$Depth <-unlist(AbundSumm$Depth)
AbundSumm$Temp <-unlist(AbundSumm$Temp)
AbundSumm$Vis <-unlist(AbundSumm$Vis)
qqnorm(AbundSumm$MaxN)
qqline(AbundSumm$MaxN)
#if the data is not normal: doesnt represent a fairly straight line, contact me, we will need
#to switch up the test
abundancettest<-t.test(AbundSumm$MaxN~AbundSumm$Bait)
#t = 1.5468, df = 7.6442, p-value = 0.1623
#mean in group Sardines mean in group Squid_pike
#35.14286                 19.57143
#This test was not significant for my data, how is if for yours?
#it is significant if the p-value is <0.05
SarAbundance<-subset(AbundSumm, Bait=="Sardines")
SqPAbundance<-subset(AbundSumm, Bait=="Squid_pike")
SarAbundanceSEM<- sd(SarAbundance$MaxN)/sqrt(length(SarAbundance$MaxN))
SqPAbundanceSEM<- sd(SqPAbundance$MaxN)/sqrt(length(SqPAbundance$MaxN))
AbundancePlotDF <- data.frame(matrix(NA, nrow = 2, ncol = 4))
colnames(AbundancePlotDF) <- c("Mean", "SEM", "poslim", "neglim")
rownames(AbundancePlotDF) <- c("Sardines", "Squid and Pike")
AbundancePlotDF$Mean <- abundancettest$estimate
AbundancePlotDF$SEM <- c(SarAbundanceSEM, SqPAbundanceSEM)
AbundancePlotDF$poslim <- (AbundancePlotDF$Mean + AbundancePlotDF$SEM)
AbundancePlotDF$neglim <- (AbundancePlotDF$Mean - AbundancePlotDF$SEM)
AbundancePlotDF$Bait <- c("Sardines", "Squid and Pike")
mod1 <- glm(AbundSumm$MaxN~AbundSumm$Bait, poisson)
summary(mod1)
AbundancePlot <- ggplot(AbundancePlotDF, aes(x = Bait, y = Mean)) +geom_point()+
labs(x="Bait type", y="Mean total abundance (# of organisms)", title="", colour="", size=3) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_errorbar(aes(ymax=poslim,ymin=neglim),position=position_dodge(0.9), width=.1, data=AbundancePlotDF)
AbundancePlot
###### CLASS ######
#then i split the data into classes and looked at how abundant each class was
#these were the classes our data contained, if you have more, you need to add these to the data
#I will show you how to add them
Actinopterygii <- c("Ariidae","Blenniidae","Cheilodactylidae", "Clinidae", "Mugilidae", "Sparidae")
Malacostraca <- c("Cymothoidae", "Palinuridae", "Plagusiidae")
Chondrichthyes<- c("Dasyatidae", "Scyliorhinidae", "Triakidae")
Cephalopoda <- c("Loliginidae", "Octopodidae")
Myxini <- c("Myxinidae")
Mammalia <- c("Otariidae")
ClassAbund <- bruvdata
CLASSES <- factor(ClassAbund$Family_name)
levels(CLASSES)
ClassAbund$group=paste(ClassAbund$Site, ClassAbund$Date)
ClassAbund[c(1,2, 3, 4, 5, 6, 7,9,11, 12, 13,14, 16, 17 ,18, 19, 20,21,22,23,24,25,26,27,28,29,30 )] <- list(NULL)
ClassAbundLength <- length(ClassAbund$group)
ClassAbund$Class <- NA
#because people don't know how to spell:
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] == "Palinurdae") {
ClassAbund$Family_name[i] <- "Palinuridae"
}
}
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] == "Ariidae"|ClassAbund$Family_name[i] == "Blenniidae"|ClassAbund$Family_name[i] == "Cheilodactylidae"|ClassAbund$Family_name[i] ==  "Clinidae"|ClassAbund$Family_name[i] ==  "Mugilidae"|ClassAbund$Family_name[i] ==  "Sparidae" #HERE
) {
ClassAbund$Class[i] <- "Actinopterygii"
}
}
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] =="Cymothoidae"|ClassAbund$Family_name[i] == "Palinuridae"|ClassAbund$Family_name[i] == "Plagusiidae" #HERE
) {
ClassAbund$Class[i] <- "Malacostraca"
}
}
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] =="Dasyatidae"|ClassAbund$Family_name[i] == "Scyliorhinidae"|ClassAbund$Family_name[i] == "Triakidae" #HERE
) {
ClassAbund$Class[i] <- "Chondrichthyes"
}
}
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] == "Loliginidae"|ClassAbund$Family_name[i] ==  "Octopodidae" #HERE
) {
ClassAbund$Class[i] <- "Cephalopoda"
}
}
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] == "Myxinidae" #HERE
) {
ClassAbund$Class[i] <- "Myxini"
}
}
for (i in 1:ClassAbundLength){
if(ClassAbund$Family_name[i] == "Otariidae" #HERE
) {
ClassAbund$Class[i] <- "Mammalia"
}
}
is.na(ClassAbund$Class)
ClassVector <- factor(ClassAbund$Class)
ClassLevels <- levels(ClassVector)
ClassLength <- length(ClassLevels)
GroupVector <- factor(ClassAbund$group)
GroupLevels <- levels(GroupVector)
GroupLength <- length(GroupLevels)
ClassSumm <- data.frame(matrix(NA, nrow = (ClassLength), ncol = 3))
colnames(ClassSumm) <- c("ID","Class", "Bait")
ClassSumm$Class <- ClassLevels
#    ClassAbund$Bait[i] <- 1
#  }
#}
#for (i in 1:ClassAbundLength) {
#  if(ClassAbund$Bait[i] == "Squid_pike"
#  ) {
#    ClassAbund$Bait[i] <- 2
#  }
#}
#make sure everything has been changed to a numeric system
as.factor(ClassAbund$Bait)
#Make a folder within your current working directory to put some txt files in
#change the working directory location to where it is on your computer
setwd("~/Dropbox/Documents/Research/SASC/BRUV Paper/ClassData")
for(i in 1:GroupLength){
groupname <- GroupLevels[i]
as.factor(groupname)
zz <- subset(ClassAbund, group == groupname)
ClassSumm$ID <- groupname
BAIT <- rep(zz$Bait[1], times = 6)
ClassSumm$Bait <- BAIT
xx<-aggregate(zz$MaxN, by=list(zz$Class), FUN=sum)
colnames(xx) <- c("Class", "Abundance")
lengthxx <- length(xx$Class)
yy <- merge(xx,ClassSumm,by=c("Class"), all = TRUE)
yy[is.na(yy)] <- 0
write.table(yy,groupname,sep="\t",row.names=TRUE)
}
filelist <- list.files()
CLASSESMASTER = NULL
for (i in 1:length(filelist)){
xx <- as.data.frame(read.table(filelist[i]))
CLASSESMASTER <- rbind(CLASSESMASTER, xx)}
model1 <- glm(CLASSESMASTER$Abundance ~ CLASSESMASTER$Bait*CLASSESMASTER$Class, family = poisson)
summary(model1)
mod2 <- glm(CLASSESMASTER$Abundance ~ CLASSESMASTER$Bait*CLASSESMASTER$Class, family = poisson)
summary(mod2)
1-pchisq(mod2$deviance, mod2$df.residual)
1-pchisq(mod2$deviance, mod2$df.residual)
Anova(mod2, type=3)
mod3 <- glm(CLASSESMASTER$Abundance ~ CLASSESMASTER$Bait*CLASSESMASTER$Class, family = poisson)
mod4 <- glm.n(CLASSESMASTER$Abundance ~ CLASSESMASTER$Bait*CLASSESMASTER$Class)
mod4 <- glm.nb(CLASSESMASTER$Abundance ~ CLASSESMASTER$Bait*CLASSESMASTER$Class)
1-pchisq(mod4$deviance,mod4$df.residual)
1-pchisq(mod3$deviance,mod3$df.residual)
mod5 <- glm(CLASSESMASTER$Abundance ~ CLASSESMASTER$Bait*CLASSESMASTER$Class, family = gaussian)
1-pchisq(mod5$deviance,mod5$df.residual)
1-pchisq(mod3$deviance,mod3$df.residual)
#0
1-pchisq(mod4$deviance,mod4$df.residual)
Anova(mod4, type=3)
view(CLASSESMASTER)
ClassSumm$Sar <- "Sardines"
ClassSumm
View(CLASSESMASTER)
Sar <- subset(CLASSESMASTER, Bait == "Sardines")
Sar
SarAgg<-aggregate(Sar$Abundance, by=list(Sar$Class), FUN = function(x) c(mean = mean(x), se = std.error(x)))
colnames(xx) <- c("Class", "Mean", "SE")
colnames(SarAgg) <- c("Class", "Mean", "SE")
SarAgg
SqP <- subset(CLASSESMASTER, Bait == "Squid_pike")
SqPAgg<-aggregate(SqP$Abundance, by=list(SqP$Class), FUN = function(x) c(mean = mean(x), se = std.error(x)))
colnames(SqPAgg) <- c("Class", "Mean", "SE")
View(SqPAgg)
View(SqPAgg)
SqPAgg<-aggregate(SqP$Abundance, by=list(SqP$Class), FUN = function(x) c(mean = mean(x), se = std.error(x)))
SarAgg
view(SarAgg)
SarAggMean<-aggregate(Sar$Abundance, by=list(Sar$Class), FUN = mean)
SarAggMean
SarAggSE<-aggregate(Sar$Abundance, by=list(Sar$Class), FUN = std.error)
SarAggSE
SarAggFull <-  merge(SarAggMean,SarAggSE,by=c("Group.1"), all = TRUE)
SarAggFull <-  merge(SarAggMean,SarAggSE,by=c("Group.1"), all = TRUE)
SarAggFull
colnames(SarAggFull) <- c("Class", "Mean", "SE")
SarAggFull
SqP <- subset(CLASSESMASTER, Bait == "Squid_pike")
SqPAggMean<-aggregate(SqP$Abundance, by=list(SqP$Class), FUN = mean)
SqPAggSE<-aggregate(SqP$Abundance, by=list(SqP$Class), FUN = std.error)
SqPAggFull <-  merge(SqPAggMean,SqPAggSE,by=c("Group.1"), all = TRUE)
colnames(SqPAggFull) <- c("Class", "Mean", "SE")
SqPAggFull
SarAggFull$Bait <- "Sar"
SarAggFull
SqPAggFull$Bait <- "SqP"
SqPAggFull
ClassPlotDF <- rbind(SarAggFull,SqPAggFull)
ClassPlotDF
ClassPlotDF$poslim <- (ClassPlotDF$Mean + ClassPlotDF$SE)
ClassPlotDF$neglim <- (ClassPlotDF$Mean - ClassPlotDF$SE)
ClassPlotDF
ClassPlot <-ggplot(data=ClassPlotDF, aes(x=Bait, y=Mean)) + geom_point(aes(shape = Class, color=Class, size = 2))+
labs(x="Bait type", y="Mean abundance (# of organisms)", title="", colour="Class", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title=element_text(size=16, face="bold") , axis.line = element_line(colour = "black"), axis.text = element_text(size=12), legend.title = element_text(size=16, face="bold")) +
scale_shape_discrete(guide =guide_legend(label.theme = element_text(angle = 0, face = "italic")), name = "Species") +
theme(axis.text.x = element_text(size = 14)) + scale_shape_manual(values = c(15,16,17,18,3,4))+
guides(shape = FALSE, fill = FALSE, size = FALSE, colour = guide_legend(override.aes = list(shape = c(15,16,17,18,3,4))))+
geom_errorbar(aes(ymax=poslim,ymin=neglim),position=position_dodge(0.9), width=.1, data=ClassPlotDF)
ClassPlot
Sar <- subset(CLASSESMASTER, Bait == "Sardines")
SarAggMean<-aggregate(Sar$Abundance, by=list(Sar$Class), FUN = mean)
SarAggSE<-aggregate(Sar$Abundance, by=list(Sar$Class), FUN = std.error)
SarAggFull <-  merge(SarAggMean,SarAggSE,by=c("Group.1"), all = TRUE)
colnames(SarAggFull) <- c("Class", "Mean", "SE")
SarAggFull$Bait <- "Sardines"
SqP <- subset(CLASSESMASTER, Bait == "Squid_pike")
SqPAggMean<-aggregate(SqP$Abundance, by=list(SqP$Class), FUN = mean)
SqPAggSE<-aggregate(SqP$Abundance, by=list(SqP$Class), FUN = std.error)
SqPAggFull <-  merge(SqPAggMean,SqPAggSE,by=c("Group.1"), all = TRUE)
colnames(SqPAggFull) <- c("Class", "Mean", "SE")
SqPAggFull$Bait <- "Squid and Pike"
ClassPlotDF <- rbind(SarAggFull,SqPAggFull)
ClassPlotDF$poslim <- (ClassPlotDF$Mean + ClassPlotDF$SE)
ClassPlotDF$neglim <- (ClassPlotDF$Mean - ClassPlotDF$SE)
ClassPlot <-ggplot(data=ClassPlotDF, aes(x=Bait, y=Mean)) + geom_point(aes(shape = Class, color=Class, size = 2))+
labs(x="Bait type", y="Mean abundance (# of organisms)", title="", colour="Class", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title=element_text(size=16, face="bold") , axis.line = element_line(colour = "black"), axis.text = element_text(size=12), legend.title = element_text(size=16, face="bold")) +
scale_shape_discrete(guide =guide_legend(label.theme = element_text(angle = 0, face = "italic")), name = "Species") +
theme(axis.text.x = element_text(size = 14)) + scale_shape_manual(values = c(15,16,17,18,3,4))+
guides(shape = FALSE, fill = FALSE, size = FALSE, colour = guide_legend(override.aes = list(shape = c(15,16,17,18,3,4))))+
geom_errorbar(aes(ymax=poslim,ymin=neglim),position=position_dodge(0.9), width=.1, data=ClassPlotDF)
ClassPlot
mod5 <- glm.nb(CLASSESMASTER$Abundance ~ CLASSESMASTER$Class)
AIC(mod4, mod5)
mod1 <- glm(AbundSumm$MaxN~AbundSumm$Bait, poisson)
mod2 <- glm.nb(AbundSumm$MaxN~AbundSumm$Bait)
mod2b <- glm(AbundSumm$MaxN~AbundSumm$Bait, gaussian)
1-pchisq(mode1$deviance, mod1$df.residual)
1-pchisq(mod1$deviance, mod1$df.residual)
1-pchisq(mod2$deviance,mod2$df.residual)
1-pchisq(mod2b$deviance,mod2b$df.residual)
Anova(mod2, type=3)
citation(package = "vegan")
citation (stats)
citation(package=stats)
citation(package ="stats")
citation(package="MASS")
cor.test(CORDATA$Vis,CORDATA$MaxN, method="pearson")
ClassAbund
SarAbund <- subset(ClassAbund, Bait=="Sardines")
Actinopterygii <- subset(SarAbund, Class == "Actinopterygii")
ActinopterygiiFact <- factor(Actinopterygii$Species_name)
levels(ActinopterygiiFact)
Cephalopoda <- subset(SarAbund, Class == "Cephalopoda")
CephalopodaFact <- factor(Cephalopoda$Species_name)
levels(CephalopodaFact)
Chondrichthyes <- subset(SarAbund, Class == "Chondrichthyes")
ChondrichthyesFact <- factor(Chondrichthyes$Species_name)
levels(ChondrichthyesFact)
Malacostraca <- subset(SarAbund, Class == "Malacostraca")
MalacostracaFact <- factor(Malacostraca$Species_name)
levels(MalacostracaFact)
Mammalia <- subset(SarAbund, Class == "Mammalia")
MammaliaFact <- factor(Mammalia$Species_name)
levels(MammaliaFact)
Myxini <- subset(SarAbund, Class == "Myxini")
MyxiniFact <- factor(Myxini$Species_name)
levels(MyxiniFact)
SqPAbund <- subset(ClassAbund, Bait=="Squid_pike")
Actinopterygii <- subset(SqPAbund, Class == "Actinopterygii")
ActinopterygiiFact <- factor(Actinopterygii$Species_name)
levels(ActinopterygiiFact)
Cephalopoda <- subset(SqPAbund, Class == "Cephalopoda")
CephalopodaFact <- factor(Cephalopoda$Species_name)
levels(CephalopodaFact)
Chondrichthyes <- subset(SqPAbund, Class == "Chondrichthyes")
ChondrichthyesFact <- factor(Chondrichthyes$Species_name)
levels(ChondrichthyesFact)
Malacostraca <- subset(SqPAbund, Class == "Malacostraca")
MalacostracaFact <- factor(Malacostraca$Species_name)
levels(MalacostracaFact)
Mammalia <- subset(SqPAbund, Class == "Mammalia")
MammaliaFact <- factor(Mammalia$Species_name)
levels(MammaliaFact)
Myxini <- subset(SqPAbund, Class == "Myxini")
MyxiniFact <- factor(Myxini$Species_name)
levels(MyxiniFact)
###### Environmental Data ######
#Correlations
CORDATA<-AbundSumm
cor.test(CORDATA$Depth,CORDATA$MaxN, method="pearson")
DepthCor <- ggplot(data = CORDATA, aes(x = Depth, y = MaxN)) +
geom_point(color='black') +
geom_smooth(method = "lm", se = TRUE)+
labs(x="Depth (m)", y="Abundance (# of organisms)", title="", colour="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title=element_text(size=16, face="bold") , axis.line = element_line(colour = "black"), axis.text = element_text(size=12), legend.title = element_text(size=16, face="bold"))
DepthCor
cor.test(CORDATA$Temp,CORDATA$MaxN, method="pearson")
TempCor <- ggplot(data = CORDATA, aes(x = Vis, y = MaxN)) +
geom_point(color='black') +
geom_smooth(method = "lm", se = TRUE)+
labs(x="Temperature (°C)", y="Abundance (# of organisms)", title="", colour="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title=element_text(size=16, face="bold") , axis.line = element_line(colour = "black"), axis.text = element_text(size=12), legend.title = element_text(size=16, face="bold"))
TempCor
cor.test(CORDATA$Vis,CORDATA$MaxN, method="pearson")
VisCor <- ggplot(data = CORDATA, aes(x = Vis, y = MaxN)) +
geom_point(color='black') +
geom_smooth(method = "lm", se = TRUE)+
labs(x="Visibility (m)", y="Abundance (# of organisms)", title="", colour="", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title=element_text(size=16, face="bold") , axis.line = element_line(colour = "black"), axis.text = element_text(size=12), legend.title = element_text(size=16, face="bold"))
VisCor
citation()
ClassPlotDF
AbundSumm
ClassPlot <-ggplot(data=ClassPlotDF, aes(x=Bait, y=Mean)) + geom_point(aes(shape = Class, color=Class, size = 2))+
labs(x="Bait type", y="Mean abundance (# of organisms)", title="", colour="Class", size=2) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title=element_text(size=16, face="bold") , axis.line = element_line(colour = "black"), axis.text = element_text(size=12), legend.title = element_text(size=16, face="bold")) +
scale_shape_discrete(guide =guide_legend(label.theme = element_text(angle = 0, face = "italic")), name = "Species") +
theme(axis.text.x = element_text(size = 14)) + scale_shape_manual(values = c(15,16,17,18,3,4))+
guides(shape = FALSE, fill = FALSE, size = FALSE, colour = guide_legend(override.aes = list(shape = c(15,16,17,18,3,4))))+
geom_errorbar(aes(ymax=poslim,ymin=neglim),position=position_dodge(0.9), width=.1, data=ClassPlotDF)
ClassPlot
